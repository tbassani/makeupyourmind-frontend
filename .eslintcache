[{"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\index.js":"1","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\App.js":"2","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\reportWebVitals.js":"3","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\routes\\Routes.js":"4","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\pages\\LoginPage.js":"5","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\routes\\AuthRoutes.js":"6","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\services\\auth.js":"7","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\components\\base\\Header.js":"8","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\context\\AppContext.js":"9","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\pages\\WelcomePage.js":"10","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\components\\product\\ProductList.js":"11","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\components\\product\\ProductCard.js":"12","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\pages\\RegistrationPage.js":"13","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\config\\endpoints.js":"14","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\context\\UserContext.js":"15","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\services\\user.js":"16","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\routes\\PrivateRoutes.js":"17","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\pages\\ProfilePage.js":"18","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\services\\app.js":"19","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\components\\common\\DynamicSelect.js":"20","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\pages\\RatingPage.js":"21","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\pages\\MainPage.js":"22","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\components\\product\\RateProduct.js":"23","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\services\\rating.js":"24"},{"size":697,"mtime":1612446668525,"results":"25","hashOfConfig":"26"},{"size":1147,"mtime":1612824451176,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1612210698121,"results":"28","hashOfConfig":"26"},{"size":1289,"mtime":1612875310774,"results":"29","hashOfConfig":"26"},{"size":2108,"mtime":1612897705847,"results":"30","hashOfConfig":"26"},{"size":468,"mtime":1612445232844,"results":"31","hashOfConfig":"26"},{"size":2222,"mtime":1612824382091,"results":"32","hashOfConfig":"26"},{"size":3147,"mtime":1612899164152,"results":"33","hashOfConfig":"26"},{"size":4864,"mtime":1612898479185,"results":"34","hashOfConfig":"26"},{"size":396,"mtime":1612874558652,"results":"35","hashOfConfig":"26"},{"size":2544,"mtime":1612897336661,"results":"36","hashOfConfig":"26"},{"size":2566,"mtime":1612893510435,"results":"37","hashOfConfig":"26"},{"size":6722,"mtime":1612806732416,"results":"38","hashOfConfig":"26"},{"size":1084,"mtime":1612308282189,"results":"39","hashOfConfig":"26"},{"size":2627,"mtime":1612898380225,"results":"40","hashOfConfig":"26"},{"size":1694,"mtime":1612531865618,"results":"41","hashOfConfig":"26"},{"size":498,"mtime":1612875346647,"results":"42","hashOfConfig":"26"},{"size":5907,"mtime":1612533130640,"results":"43","hashOfConfig":"26"},{"size":4430,"mtime":1612792540829,"results":"44","hashOfConfig":"26"},{"size":1379,"mtime":1612823320062,"results":"45","hashOfConfig":"26"},{"size":629,"mtime":1612893525925,"results":"46","hashOfConfig":"26"},{"size":396,"mtime":1612877007400,"results":"47","hashOfConfig":"26"},{"size":2216,"mtime":1612894740895,"results":"48","hashOfConfig":"26"},{"size":608,"mtime":1612894262124,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"cwkrlr",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\index.js",[],["102","103"],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\App.js",["104"],"import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Routes from '../src/routes/Routes.js';\r\n\r\nimport Header from '../src/components/base/Header.js';\r\n\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport { useUser } from './context/UserContext.js';\r\n\r\nconst App = () => {\r\n  const [signed, setSigned] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const { jwt, loading } = useUser();\r\n  useEffect(() => {\r\n    setSigned(Boolean(jwt));\r\n    setIsLoading(loading);\r\n  }, [jwt]);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(loading);\r\n  }, [loading]);\r\n\r\n  return (\r\n    <div>\r\n      <Header isSigned={signed} style={{ position: 'sticky' }} />\r\n      {!isLoading ? (\r\n        <div className=\"App\" style={{ justifyContent: 'space-around', display: 'flex', flex: 1 }}>\r\n          <Routes isSigned={signed} />\r\n        </div>\r\n      ) : (\r\n        <div style={{ top: '50%', left: '50%', position: 'absolute' }}>\r\n          <Spinner animation=\"border\" variant=\"primary\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\reportWebVitals.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\routes\\Routes.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\pages\\LoginPage.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\routes\\AuthRoutes.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\services\\auth.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\components\\base\\Header.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\context\\AppContext.js",["105","106","107"],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\pages\\WelcomePage.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\components\\product\\ProductList.js",["108","109","110"],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\components\\product\\ProductCard.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\pages\\RegistrationPage.js",["111","112","113","114","115"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useUser } from '../context/UserContext.js';\r\nimport DynamicSelect from '../components/common/DynamicSelect.js';\r\nimport { useApp } from '../context/AppContext.js';\r\n\r\nconst RegistrationPage = (props) => {\r\n  const { signUp } = useUser();\r\n  const { skinProfiles, getSkinProfiles } = useApp();\r\n\r\n  const [firstname, setFirstname] = useState('');\r\n  const [lastname, setLastname] = useState('');\r\n  const [email, setEmail] = useState('seu@email.com');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [color, setColor] = useState('');\r\n  const [acne, setAcne] = useState('');\r\n  const [lines, setLines] = useState('');\r\n  const [oiliness, setOiliness] = useState('');\r\n  const [skinTypes, setSkinTypes] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(skinProfiles);\r\n    setSkinTypes(skinProfiles);\r\n  }, [skinProfiles]);\r\n\r\n  const onSubmitForm = async (e) => {\r\n    e.preventDefault();\r\n    console.log('Register');\r\n    if (password === confirmPassword) {\r\n      const resp = await signUp({\r\n        first_name: 'User',\r\n        last_name: 'Name',\r\n        email,\r\n        password,\r\n        skin_color: color,\r\n        skin_acne: acne,\r\n        skin_oiliness: oiliness,\r\n        skin_lines: lines,\r\n      });\r\n      if (resp.result) {\r\n        props.history.push('/main');\r\n      } else {\r\n        alert(resp.errorMsg);\r\n      }\r\n    } else {\r\n      alert('As senhas não correspondem!');\r\n    }\r\n  };\r\n\r\n  const colorHandler = (val) => {\r\n    setColor(val);\r\n  };\r\n  const acneHandler = (val) => {\r\n    setAcne(val);\r\n  };\r\n  const linesHandler = (val) => {\r\n    setLines(val);\r\n  };\r\n  const oilinessHandler = (val) => {\r\n    setOiliness(val);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      id=\"container\"\r\n      style={{\r\n        width: '80%',\r\n        display: 'flex',\r\n        justifyContent: 'space-evenly',\r\n        margin: '1rem',\r\n        flexDirection: 'column',\r\n        flex: 0.6,\r\n      }}\r\n    >\r\n      <h2>Registre-se!</h2>\r\n      <Form\r\n        onSubmit={(e) => onSubmitForm(e)}\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          flex: 0.5,\r\n        }}\r\n      >\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Group controlId=\"formHorizontalEmail\">\r\n              <Col>\r\n                <Row>\r\n                  <Form.Control\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    required\r\n                    type=\"email\"\r\n                    placeholder=\"Email\"\r\n                  />\r\n                </Row>\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formHorizontalPassword\">\r\n              <Col>\r\n                <Row>\r\n                  <Form.Control\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    required\r\n                    type=\"password\"\r\n                    placeholder=\"Senha\"\r\n                  />\r\n                </Row>\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formHorizontalConfirmPassword\">\r\n              <Col>\r\n                <Row>\r\n                  <Form.Control\r\n                    value={confirmPassword}\r\n                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    required\r\n                    type=\"password\"\r\n                    placeholder=\"Confirmar senha\"\r\n                  />\r\n                </Row>\r\n              </Col>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm={1}></Col>\r\n          <Col>\r\n            <Form.Group controlId=\"formGridColor\">\r\n              <Col>\r\n                <Row>\r\n                  {skinTypes.skin_color ? (\r\n                    <DynamicSelect\r\n                      aria-required=\"true\"\r\n                      required\r\n                      data={skinTypes.skin_color}\r\n                      default={''}\r\n                      handleSelect={colorHandler}\r\n                    ></DynamicSelect>\r\n                  ) : (\r\n                    <Form.Control></Form.Control>\r\n                  )}\r\n                </Row>\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formGridAcne\">\r\n              <Col>\r\n                <Row>\r\n                  {skinTypes.skin_acne ? (\r\n                    <DynamicSelect\r\n                      aria-required=\"true\"\r\n                      required\r\n                      data={skinTypes.skin_acne}\r\n                      default={''}\r\n                      handleSelect={acneHandler}\r\n                    ></DynamicSelect>\r\n                  ) : (\r\n                    <Form.Control></Form.Control>\r\n                  )}\r\n                </Row>\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formGridLines\">\r\n              <Col>\r\n                <Row>\r\n                  {skinTypes.skin_lines ? (\r\n                    <DynamicSelect\r\n                      aria-required=\"true\"\r\n                      required\r\n                      data={skinTypes.skin_lines}\r\n                      default={''}\r\n                      handleSelect={linesHandler}\r\n                    ></DynamicSelect>\r\n                  ) : (\r\n                    <Form.Control></Form.Control>\r\n                  )}\r\n                </Row>\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"formGridOiliness\">\r\n              <Col>\r\n                <Row>\r\n                  {skinTypes.skin_oiliness ? (\r\n                    <DynamicSelect\r\n                      aria-required=\"true\"\r\n                      required\r\n                      data={skinTypes.skin_oiliness}\r\n                      default={''}\r\n                      handleSelect={oilinessHandler}\r\n                    ></DynamicSelect>\r\n                  ) : (\r\n                    <Form.Control></Form.Control>\r\n                  )}\r\n                </Row>\r\n              </Col>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n        <Row style={{ display: 'flex', flexDirection: 'row', flex: 0.2, justifyContent: 'center' }}>\r\n          <Button variant=\"primary\" type=\"submit\">\r\n            Registrar-se\r\n          </Button>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Link to=\"/login\">Já é cadastrado?</Link>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegistrationPage;\r\n","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\config\\endpoints.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\context\\UserContext.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\services\\user.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\routes\\PrivateRoutes.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\pages\\ProfilePage.js",["116","117"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport DynamicSelect from '../components/common/DynamicSelect.js';\r\nimport { useApp } from '../context/AppContext.js';\r\nimport { useUser } from '../context/UserContext.js';\r\n\r\nconst ProfilePage = (props) => {\r\n  const { skinProfiles } = useApp();\r\n  const { getUserProfile, profile, setUserProfile } = useUser();\r\n\r\n  const [initialColor, setInitialColor] = useState('');\r\n  const [initialAcne, setInitialAcne] = useState('');\r\n  const [initiaLines, setInitialLines] = useState('');\r\n  const [initialOiliness, setInitialOiliness] = useState('');\r\n  const [color, setColor] = useState('');\r\n  const [acne, setAcne] = useState('');\r\n  const [lines, setLines] = useState('');\r\n  const [oiliness, setOiliness] = useState('');\r\n  const [skinTypes, setSkinTypes] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const setTypes = async () => {\r\n      await getUserProfile();\r\n      setLoading(false);\r\n    };\r\n    setTypes();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSkinTypes(skinProfiles);\r\n  }, [skinProfiles]);\r\n\r\n  useEffect(() => {\r\n    for (const key in profile) {\r\n      setInitialColor(profile.skin_color_id);\r\n      setInitialOiliness(profile.skin_oiliness_id);\r\n      setInitialLines(profile.skin_lines_id);\r\n      setInitialAcne(profile.skin_acne_id);\r\n      setColor(profile.skin_color_id);\r\n      setOiliness(profile.skin_oiliness_id);\r\n      setLines(profile.skin_lines_id);\r\n      setAcne(profile.skin_acne_id);\r\n    }\r\n  }, [profile]);\r\n\r\n  const onSubmitForm = async (e) => {\r\n    e.preventDefault();\r\n    const resp = await setUserProfile({\r\n      skin_color: color,\r\n      skin_acne: acne,\r\n      skin_oiliness: oiliness,\r\n      skin_lines: lines,\r\n    });\r\n    if (resp) {\r\n      props.history.push('/');\r\n    }\r\n  };\r\n\r\n  const colorHandler = (val) => {\r\n    setColor(val);\r\n  };\r\n  const acneHandler = (val) => {\r\n    setAcne(val);\r\n  };\r\n  const linesHandler = (val) => {\r\n    setLines(val);\r\n  };\r\n  const oilinessHandler = (val) => {\r\n    setOiliness(val);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      id=\"container\"\r\n      style={{\r\n        width: '80%',\r\n        display: 'flex',\r\n        justifyContent: 'space-evenly',\r\n        margin: '1rem',\r\n        flexDirection: 'column',\r\n        flex: 0.6,\r\n      }}\r\n    >\r\n      <h2>Atualizar perfil de pele</h2>\r\n      <Form\r\n        onSubmit={(e) => onSubmitForm(e)}\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          flex: 0.5,\r\n        }}\r\n      >\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Label>Cor da Pele</Form.Label>\r\n            <Form.Group controlId=\"formGridColor\">\r\n              <Col>\r\n                <Row>\r\n                  {skinTypes.skin_color ? (\r\n                    <DynamicSelect\r\n                      aria-required=\"true\"\r\n                      required\r\n                      data={skinTypes.skin_color}\r\n                      default={initialColor}\r\n                      handleSelect={colorHandler}\r\n                    ></DynamicSelect>\r\n                  ) : (\r\n                    <Form.Control></Form.Control>\r\n                  )}\r\n                </Row>\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Label>Acne</Form.Label>\r\n            <Form.Group controlId=\"formGridAcne\">\r\n              <Col>\r\n                <Row>\r\n                  {skinTypes.skin_acne ? (\r\n                    <DynamicSelect\r\n                      aria-required=\"true\"\r\n                      required\r\n                      data={skinTypes.skin_acne}\r\n                      default={initialAcne}\r\n                      handleSelect={acneHandler}\r\n                    ></DynamicSelect>\r\n                  ) : (\r\n                    <Form.Control></Form.Control>\r\n                  )}\r\n                </Row>\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Label>Linhas da pele</Form.Label>\r\n            <Form.Group controlId=\"formGridLines\">\r\n              <Col>\r\n                <Row>\r\n                  {skinTypes.skin_lines ? (\r\n                    <DynamicSelect\r\n                      aria-required=\"true\"\r\n                      required\r\n                      data={skinTypes.skin_lines}\r\n                      default={initiaLines}\r\n                      handleSelect={linesHandler}\r\n                    ></DynamicSelect>\r\n                  ) : (\r\n                    <Form.Control></Form.Control>\r\n                  )}\r\n                </Row>\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Label>Oleosidade</Form.Label>\r\n            <Form.Group controlId=\"formGridOiliness\">\r\n              <Col>\r\n                <Row>\r\n                  {skinTypes.skin_oiliness ? (\r\n                    <DynamicSelect\r\n                      aria-required=\"true\"\r\n                      required\r\n                      data={skinTypes.skin_oiliness}\r\n                      default={initialOiliness}\r\n                      handleSelect={oilinessHandler}\r\n                    ></DynamicSelect>\r\n                  ) : (\r\n                    <Form.Control></Form.Control>\r\n                  )}\r\n                </Row>\r\n              </Col>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n        <Row style={{ display: 'flex', flexDirection: 'row', flex: 0.2, justifyContent: 'center' }}>\r\n          {loading ? (\r\n            <Spinner animation=\"border\" variant=\"primary\" />\r\n          ) : (\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Atualizar Perfil\r\n            </Button>\r\n          )}\r\n        </Row>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\services\\app.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\components\\common\\DynamicSelect.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\pages\\RatingPage.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\pages\\MainPage.js",[],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\components\\product\\RateProduct.js",["118"],"C:\\Workspace\\Projects\\makeupyourmind-frontend\\src\\services\\rating.js",[],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":20,"column":6,"nodeType":"125","endLine":20,"endColumn":11,"suggestions":"126"},{"ruleId":"123","severity":1,"message":"127","line":34,"column":6,"nodeType":"125","endLine":34,"endColumn":8,"suggestions":"128"},{"ruleId":"123","severity":1,"message":"129","line":120,"column":6,"nodeType":"125","endLine":120,"endColumn":45,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":170,"column":9,"nodeType":"133","messageId":"134","endLine":170,"endColumn":19},{"ruleId":"135","severity":1,"message":"136","line":1,"column":38,"nodeType":"137","messageId":"138","endLine":1,"endColumn":47},{"ruleId":"135","severity":1,"message":"139","line":1,"column":49,"nodeType":"137","messageId":"138","endLine":1,"endColumn":57},{"ruleId":"123","severity":1,"message":"140","line":33,"column":5,"nodeType":"125","endLine":33,"endColumn":46,"suggestions":"141"},{"ruleId":"135","severity":1,"message":"142","line":16,"column":25,"nodeType":"137","messageId":"138","endLine":16,"endColumn":40},{"ruleId":"135","severity":1,"message":"143","line":18,"column":10,"nodeType":"137","messageId":"138","endLine":18,"endColumn":19},{"ruleId":"135","severity":1,"message":"144","line":18,"column":21,"nodeType":"137","messageId":"138","endLine":18,"endColumn":33},{"ruleId":"135","severity":1,"message":"145","line":19,"column":10,"nodeType":"137","messageId":"138","endLine":19,"endColumn":18},{"ruleId":"135","severity":1,"message":"146","line":19,"column":20,"nodeType":"137","messageId":"138","endLine":19,"endColumn":31},{"ruleId":"123","severity":1,"message":"147","line":34,"column":6,"nodeType":"125","endLine":34,"endColumn":8,"suggestions":"148"},{"ruleId":"135","severity":1,"message":"149","line":41,"column":16,"nodeType":"137","messageId":"138","endLine":41,"endColumn":19},{"ruleId":"123","severity":1,"message":"150","line":21,"column":6,"nodeType":"125","endLine":21,"endColumn":8,"suggestions":"151"},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loading'. Either include it or remove the dependency array.","ArrayExpression",["154"],"React Hook useEffect has a missing dependency: 'getMakers'. Either include it or remove the dependency array.",["155"],"React Hook useEffect has a missing dependency: 'products'. Either include it or remove the dependency array.",["156"],"no-dupe-keys","Duplicate key 'categories'.","ObjectExpression","unexpected","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","React Hook useCallback has an unnecessary dependency: 'hasMore'. Either exclude it or remove the dependency array.",["157"],"'getSkinProfiles' is assigned a value but never used.","'firstname' is assigned a value but never used.","'setFirstname' is assigned a value but never used.","'lastname' is assigned a value but never used.","'setLastname' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserProfile'. Either include it or remove the dependency array.",["158"],"'key' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.product_id'. Either include it or remove the dependency array.",["159"],"no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [jwt, loading]",{"range":"172","text":"173"},"Update the dependencies array to be: [getMakers]",{"range":"174","text":"175"},"Update the dependencies array to be: [userInput, page, maker, category, jwt, products]",{"range":"176","text":"177"},"Update the dependencies array to be: [page, setPage, loadingProducts]",{"range":"178","text":"179"},"Update the dependencies array to be: [getUserProfile]",{"range":"180","text":"181"},"Update the dependencies array to be: [props.product_id]",{"range":"182","text":"183"},[581,586],"[jwt, loading]",[1058,1060],"[getMakers]",[3439,3478],"[userInput, page, maker, category, jwt, products]",[950,991],"[page, setPage, loadingProducts]",[1242,1244],"[getUserProfile]",[569,571],"[props.product_id]"]